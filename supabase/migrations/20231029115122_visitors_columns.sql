drop policy "Allow users to view their own conversations" on "public"."conversations";

alter table "public"."conversations" drop constraint "conversations_user_id_fkey";

create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default (now() AT TIME ZONE 'utc'::text),
    "content" text,
    "role" text,
    "conversation" uuid,
    "owner" uuid,
    "embedding" vector,
    "token_size" integer
);


alter table "public"."messages" enable row level security;

create table "public"."visitors" (
    "id" bigint generated by default as identity not null,
    "fingerprint_id" character varying,
    "created_at" timestamp with time zone default now(),
    "message_allowance" smallint not null default '3'::smallint,
    "conversation_blob" jsonb[]
);


alter table "public"."conversations" drop column "entry";

alter table "public"."conversations" drop column "interaction_id";

alter table "public"."conversations" drop column "speaker";

alter table "public"."conversations" drop column "user_id";

alter table "public"."conversations" add column "advanced_settings" jsonb;

alter table "public"."conversations" add column "history_type" text;

alter table "public"."conversations" add column "model" text;

alter table "public"."conversations" add column "owner" uuid;

alter table "public"."conversations" add column "system_prompt" text;

alter table "public"."conversations" add column "title" text;

alter table "public"."conversations" alter column "created_at" set default (now() AT TIME ZONE 'utc'::text);

alter table "public"."conversations" alter column "created_at" drop not null;

alter table "public"."conversations" alter column "id" set default gen_random_uuid();

alter table "public"."conversations" alter column "id" drop identity;

alter table "public"."conversations" alter column "id" set data type uuid using "id"::uuid;

alter table "public"."profiles" add column "fingerprint_id" text;

alter table "public"."profiles" alter column "name" drop not null;

alter table "public"."profiles" alter column "onboarded_at" drop default;

CREATE UNIQUE INDEX messages_2_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX profiles_fingerprint_id_key ON public.profiles USING btree (fingerprint_id);

CREATE UNIQUE INDEX visitors_fingerprint_id_key ON public.visitors USING btree (fingerprint_id);

CREATE UNIQUE INDEX visitors_pkey ON public.visitors USING btree (id);

alter table "public"."messages" add constraint "messages_2_pkey" PRIMARY KEY using index "messages_2_pkey";

alter table "public"."visitors" add constraint "visitors_pkey" PRIMARY KEY using index "visitors_pkey";

alter table "public"."conversations" add constraint "conversations_owner_fkey" FOREIGN KEY (owner) REFERENCES profiles(id) not valid;

alter table "public"."conversations" validate constraint "conversations_owner_fkey";

alter table "public"."messages" add constraint "messages_conversation_fkey" FOREIGN KEY (conversation) REFERENCES conversations(id) not valid;

alter table "public"."messages" validate constraint "messages_conversation_fkey";

alter table "public"."messages" add constraint "messages_owner_fkey" FOREIGN KEY (owner) REFERENCES profiles(id) not valid;

alter table "public"."messages" validate constraint "messages_owner_fkey";

alter table "public"."profiles" add constraint "profiles_fingerprint_id_key" UNIQUE using index "profiles_fingerprint_id_key";

alter table "public"."visitors" add constraint "visitors_fingerprint_id_key" UNIQUE using index "visitors_fingerprint_id_key";

create policy "Authed users can update conversations"
on "public"."conversations"
as permissive
for update
to authenticated, service_role
using (true);


create policy "Enable read for authenticated users only"
on "public"."conversations"
as permissive
for select
to authenticated
using (true);


create policy "Allow anons to update visitors table"
on "public"."visitors"
as permissive
for update
to anon
using (true);


create policy "Enable insert for anon users only"
on "public"."visitors"
as permissive
for insert
to anon
with check (true);


create policy "Enable read access for all users"
on "public"."visitors"
as permissive
for select
to public
using (true);



